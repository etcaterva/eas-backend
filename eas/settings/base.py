"""
Django settings for eas project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import pathlib
import socket
import string

ROOT_DIR = pathlib.Path(__file__).absolute().parent.parent.parent
APP_DIR = ROOT_DIR / "eas"

DEBUG = False
ADMIN_ENABLED = False

_local_ips = [
    "127.0.0.1",
]

try:
    _local_ips.append(
        socket.gethostbyname(socket.gethostname()),
    )  # IP
except socket.gaierror:
    pass

ALLOWED_HOSTS = [
    ".echaloasuerte.com",
    ".woreep.com",
    ".chooserandom.com",
    *_local_ips,
]

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]


THIRD_PRATY_APPS = [
    "rest_framework",
]

LOCAL_APPS = [
    "eas",
    "eas.api",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PRATY_APPS + LOCAL_APPS

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [],
    "DEFAULT_PERMISSION_CLASSES": [],
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "eas.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "eas.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": str(ROOT_DIR / "db.sqlite3"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/static/"

# Generation of swagger file from command line in manage.py

SWAGGER_SETTINGS = {
    "DEFAULT_INFO": "eas.api.urls.api_info",
}

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_exiting_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s.%(msecs)03d] %(levelname)s %(name)s %(filename)s:%(lineno)s | %(message)s",
            "datefmt": "%Y-%m-%dT%H:%M:%S",
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django.request": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "eas": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# Secret key generation
SECRET_FILE = str(APP_DIR / ".secret.txt")
try:
    SECRET_KEY = open(SECRET_FILE).read().strip()
except EnvironmentError:
    from random import choice

    SECRET_KEY = "".join([choice(string.ascii_letters) for _ in range(50)])
    with open(SECRET_FILE, "w") as secret:
        secret.write(SECRET_KEY)

# List the renders for DRF. Developer UI added can be added on other files
DEFAULT_RENDERER_CLASSES = [
    "rest_framework.renderers.JSONRenderer",
]  # use append, dont just override this varible

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": DEFAULT_RENDERER_CLASSES,
    "EXCEPTION_HANDLER": "eas.api.error_handler.drf_validation_handler",
}

PAYPAL_SECRET = os.environ.get("EAS_PAYPAL_SECRET", "paypal-secret-unset")

AWS_KEY_ID = "AKIAQ337QRVCGGGT4UH6"
AWS_KEY_SECRET = os.environ.get("EAS_AWS_KEY_SECRET")
LAMADAVA_APIK = os.environ.get("EAS_LAMADAVA_APIK", "lamadava-apik")
LAMATOK_APIK = os.environ.get("EAS_LAMATOK_APIK", "lamatok-apik")
REVOLUT_SECRET = os.environ.get("EAS_REVOLUT_SECRET")
STRIPE_API_KEY = os.environ.get("EAS_STRIPE_API_KEY")

# User subscription tiers and Instagram comment limits
# Lookup keys should match the payment lookup_key in Stripe
SUBSCRIPTION_TIERS = {
    "free": {
        "max_instagram_comments": 300,
        "name": "Free",
        "lookup_keys": [],  # Free tier has no lookup_keys
    },
    "starter": {
        "max_instagram_comments": 2000,
        "name": "Starter",
        "lookup_keys": [
            "starter_monthly",
            "starter_yearly",
        ],
    },
    "creator": {
        "max_instagram_comments": 5000,
        "name": "Creator",
        "lookup_keys": [
            "creator_monthly",
            "creator_yearly",
        ],
    },
    "agency": {
        "max_instagram_comments": 2147483647,  # MAX_INT
        "name": "Agency",
        "lookup_keys": [
            "agency_monthly",
            "agency_yearly",
        ],
    },
}

# Magic link token expiration in minutes
MAGIC_LINK_EXPIRATION_MINUTES = 15
