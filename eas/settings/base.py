"""
Django settings for eas project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import string
import pathlib
import socket

ROOT_DIR = pathlib.Path(__file__).absolute().parent.parent.parent
APP_DIR = ROOT_DIR / 'eas'

DEBUG = False

ALLOWED_HOSTS = [
    '.echaloasuerte.com',
    '.woreep.com',
    '.chooserandom.com',
    socket.gethostbyname(socket.gethostname()),  # IP
    '127.0.0.1',
]

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]


THIRD_PRATY_APPS = [
    'rest_framework',
]

LOCAL_APPS = [
    'eas',
    'eas.api',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PRATY_APPS + LOCAL_APPS

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [],
    'DEFAULT_PERMISSION_CLASSES': [],
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'eas.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'eas.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': str(ROOT_DIR / 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

# Generation of swagger file from command line in manage.py

SWAGGER_SETTINGS = {
    'DEFAULT_INFO': 'eas.api.urls.api_info',
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_exiting_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s.%(msecs)03d] %(levelname)s %(name)s %(filename)s:%(lineno)s | %(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S',
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'eas': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    }

}

# Secret key generation
SECRET_FILE = str(APP_DIR / '.secret.txt')
try:
    SECRET_KEY = open(SECRET_FILE).read().strip()
except EnvironmentError:
    from random import choice
    SECRET_KEY = ''.join([choice(string.ascii_letters) for _ in range(50)])
    with open(SECRET_FILE, 'w') as secret:
        secret.write(SECRET_KEY)

# List the renders for DRF. Developer UI added can be added on other files
DEFAULT_RENDERER_CLASSES = [
    'rest_framework.renderers.JSONRenderer',
]  # use append, dont just override this varible

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': DEFAULT_RENDERER_CLASSES
}
